/*
* generated by Xtext
*/

package com.roboConf.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RoboConfdslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cFeaturesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFeaturesFeatureParserRuleCall_0 = (RuleCall)cFeaturesAssignment.eContents().get(0);
		
		//Model: //greetings+=Greeting*;
		//
		//	Features+=Feature*;
		public ParserRule getRule() { return rule; }

		////greetings+=Greeting*;
		//
		//Features+=Feature*
		public Assignment getFeaturesAssignment() { return cFeaturesAssignment; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_0() { return cFeaturesFeatureParserRuleCall_0; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFacetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInstanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////Greeting:
		//
		////	'Hello' name=ID '!';
		//
		////	
		//
		////HolloWorld:
		//
		////	'hello people'
		//
		////;
		//
		//Feature:
		//
		//	Component | Facet | Instance;
		public ParserRule getRule() { return rule; }

		//Component | Facet | Instance
		public Alternatives getAlternatives() { return cAlternatives; }

		//Component
		public RuleCall getComponentParserRuleCall_0() { return cComponentParserRuleCall_0; }

		//Facet
		public RuleCall getFacetParserRuleCall_1() { return cFacetParserRuleCall_1; }

		//Instance
		public RuleCall getInstanceParserRuleCall_2() { return cInstanceParserRuleCall_2; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertiesPropertieParserRuleCall_2_0 = (RuleCall)cPropertiesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Component description
		//
		//Component:
		//
		//	name=ID "{" Properties+=Propertie* "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" Properties+=Propertie* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//Properties+=Propertie*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Propertie
		public RuleCall getPropertiesPropertieParserRuleCall_2_0() { return cPropertiesPropertieParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PropertieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Propertie");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstallerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChildrenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExportsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cImportsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFacetParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExtendsParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Propertie:
		//
		//	Installer | Children | Exports | Imports | Facet | Extends;
		public ParserRule getRule() { return rule; }

		//Installer | Children | Exports | Imports | Facet | Extends
		public Alternatives getAlternatives() { return cAlternatives; }

		//Installer
		public RuleCall getInstallerParserRuleCall_0() { return cInstallerParserRuleCall_0; }

		//Children
		public RuleCall getChildrenParserRuleCall_1() { return cChildrenParserRuleCall_1; }

		//Exports
		public RuleCall getExportsParserRuleCall_2() { return cExportsParserRuleCall_2; }

		//Imports
		public RuleCall getImportsParserRuleCall_3() { return cImportsParserRuleCall_3; }

		//Facet
		public RuleCall getFacetParserRuleCall_4() { return cFacetParserRuleCall_4; }

		//Extends
		public RuleCall getExtendsParserRuleCall_5() { return cExtendsParserRuleCall_5; }
	}

	public class ExtendsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Extends");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtIDTerminalRuleCall_1_0 = (RuleCall)cExtAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertieAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPropertiePropertieCrossReference_3_0 = (CrossReference)cPropertieAssignment_3.eContents().get(0);
		private final RuleCall cPropertiePropertieIDTerminalRuleCall_3_0_1 = (RuleCall)cPropertiePropertieCrossReference_3_0.eContents().get(1);
		
		//// TODO Extend
		//
		//Extends:
		//
		//	"extends"? ext=ID ":" propertie=[Propertie];
		public ParserRule getRule() { return rule; }

		//"extends"? ext=ID ":" propertie=[Propertie]
		public Group getGroup() { return cGroup; }

		//"extends"?
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }

		//ext=ID
		public Assignment getExtAssignment_1() { return cExtAssignment_1; }

		//ID
		public RuleCall getExtIDTerminalRuleCall_1_0() { return cExtIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//propertie=[Propertie]
		public Assignment getPropertieAssignment_3() { return cPropertieAssignment_3; }

		//[Propertie]
		public CrossReference getPropertiePropertieCrossReference_3_0() { return cPropertiePropertieCrossReference_3_0; }

		//ID
		public RuleCall getPropertiePropertieIDTerminalRuleCall_3_0_1() { return cPropertiePropertieIDTerminalRuleCall_3_0_1; }
	}

	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cVIRGULETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cFullStopKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Imports:
		//
		//	"imports:"? ID "." ID (VIRGULE ID "." ID)* POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//"imports:"? ID "." ID (VIRGULE ID "." ID)* POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//"imports:"?
		public Keyword getImportsKeyword_0() { return cImportsKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//(VIRGULE ID "." ID)*
		public Group getGroup_4() { return cGroup_4; }

		//VIRGULE
		public RuleCall getVIRGULETerminalRuleCall_4_0() { return cVIRGULETerminalRuleCall_4_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_1() { return cIDTerminalRuleCall_4_1; }

		//"."
		public Keyword getFullStopKeyword_4_2() { return cFullStopKeyword_4_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_4_3() { return cIDTerminalRuleCall_4_3; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_5() { return cPOINT_VIRGULETerminalRuleCall_5; }
	}

	public class ExportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cVIRGULETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Exports:
		//
		//	"exports:"? ID (VIRGULE ID "=" INT)* POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//"exports:"? ID (VIRGULE ID "=" INT)* POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//"exports:"?
		public Keyword getExportsKeyword_0() { return cExportsKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//(VIRGULE ID "=" INT)*
		public Group getGroup_2() { return cGroup_2; }

		//VIRGULE
		public RuleCall getVIRGULETerminalRuleCall_2_0() { return cVIRGULETerminalRuleCall_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }

		//"="
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_2_3() { return cINTTerminalRuleCall_2_3; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_3() { return cPOINT_VIRGULETerminalRuleCall_3; }
	}

	public class ChildrenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Children");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChildrenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChildrenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildrenChildParserRuleCall_1_0 = (RuleCall)cChildrenAssignment_1.eContents().get(0);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Children:
		//
		//	"children:"? children=child POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//"children:"? children=child POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//"children:"?
		public Keyword getChildrenKeyword_0() { return cChildrenKeyword_0; }

		//children=child
		public Assignment getChildrenAssignment_1() { return cChildrenAssignment_1; }

		//child
		public RuleCall getChildrenChildParserRuleCall_1_0() { return cChildrenChildParserRuleCall_1_0; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_2() { return cPOINT_VIRGULETerminalRuleCall_2; }
	}

	public class ChildElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "child");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cVIRGULETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//child:
		//
		//	expression (VIRGULE expression)* POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//expression (VIRGULE expression)* POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//(VIRGULE expression)*
		public Group getGroup_1() { return cGroup_1; }

		//VIRGULE
		public RuleCall getVIRGULETerminalRuleCall_1_0() { return cVIRGULETerminalRuleCall_1_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_2() { return cPOINT_VIRGULETerminalRuleCall_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//expression:
		//
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class InstallerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Installer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstallerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Installer:
		//
		//	"installer:" name=ID POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//"installer:" name=ID POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//"installer:"
		public Keyword getInstallerKeyword_0() { return cInstallerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_2() { return cPOINT_VIRGULETerminalRuleCall_2; }
	}

	public class FacetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Facet");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cFacetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNamefacetAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNamefacetIDTerminalRuleCall_0_1_0 = (RuleCall)cNamefacetAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cChildrenAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cChildrenChildrenParserRuleCall_0_3_0 = (RuleCall)cChildrenAssignment_0_3.eContents().get(0);
		private final Assignment cExportsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cExportsExportsParserRuleCall_1_0 = (RuleCall)cExportsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Assignment cExtendsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExtendsExtendsParserRuleCall_2_0_0 = (RuleCall)cExtendsAssignment_2_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		////Facet description
		//
		//Facet:
		//
		//	"facet" namefacet=ID "{" children=Children? & exports=Exports? & extends=Extends? "}";
		public ParserRule getRule() { return rule; }

		//"facet" namefacet=ID "{" children=Children? & exports=Exports? & extends=Extends? "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"facet" namefacet=ID "{" children=Children?
		public Group getGroup_0() { return cGroup_0; }

		//"facet"
		public Keyword getFacetKeyword_0_0() { return cFacetKeyword_0_0; }

		//namefacet=ID
		public Assignment getNamefacetAssignment_0_1() { return cNamefacetAssignment_0_1; }

		//ID
		public RuleCall getNamefacetIDTerminalRuleCall_0_1_0() { return cNamefacetIDTerminalRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//children=Children?
		public Assignment getChildrenAssignment_0_3() { return cChildrenAssignment_0_3; }

		//Children
		public RuleCall getChildrenChildrenParserRuleCall_0_3_0() { return cChildrenChildrenParserRuleCall_0_3_0; }

		//exports=Exports?
		public Assignment getExportsAssignment_1() { return cExportsAssignment_1; }

		//Exports
		public RuleCall getExportsExportsParserRuleCall_1_0() { return cExportsExportsParserRuleCall_1_0; }

		//extends=Extends? "}"
		public Group getGroup_2() { return cGroup_2; }

		//extends=Extends?
		public Assignment getExtendsAssignment_2_0() { return cExtendsAssignment_2_0; }

		//Extends
		public RuleCall getExtendsExtendsParserRuleCall_2_0_0() { return cExtendsExtendsParserRuleCall_2_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1() { return cRightCurlyBracketKeyword_2_1; }
	}

	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNstanceNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNstanceNameComponentCrossReference_1_0 = (CrossReference)cNstanceNameAssignment_1.eContents().get(0);
		private final RuleCall cNstanceNameComponentIDTerminalRuleCall_1_0_1 = (RuleCall)cNstanceNameComponentCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstancePropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInstancePropertiesInstancePropertieParserRuleCall_3_0 = (RuleCall)cInstancePropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Instance Description
		//
		//Instance:
		//
		//	"instance of" nstanceName=[Component] "{" InstanceProperties+=InstancePropertie* "}";
		public ParserRule getRule() { return rule; }

		//"instance of" nstanceName=[Component] "{" InstanceProperties+=InstancePropertie* "}"
		public Group getGroup() { return cGroup; }

		//"instance of"
		public Keyword getInstanceOfKeyword_0() { return cInstanceOfKeyword_0; }

		//nstanceName=[Component]
		public Assignment getNstanceNameAssignment_1() { return cNstanceNameAssignment_1; }

		//[Component]
		public CrossReference getNstanceNameComponentCrossReference_1_0() { return cNstanceNameComponentCrossReference_1_0; }

		//ID
		public RuleCall getNstanceNameComponentIDTerminalRuleCall_1_0_1() { return cNstanceNameComponentIDTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//InstanceProperties+=InstancePropertie*
		public Assignment getInstancePropertiesAssignment_3() { return cInstancePropertiesAssignment_3; }

		//InstancePropertie
		public RuleCall getInstancePropertiesInstancePropertieParserRuleCall_3_0() { return cInstancePropertiesInstancePropertieParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InstancePropertieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstancePropertie");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cNameInstAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cNameInstNameParserRuleCall_0_0 = (RuleCall)cNameInstAssignment_0.eContents().get(0);
		private final Assignment cCountAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cCountCountParserRuleCall_1_0 = (RuleCall)cCountAssignment_1.eContents().get(0);
		private final Assignment cInstanceAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cInstanceInstancesParserRuleCall_2_0 = (RuleCall)cInstanceAssignment_2.eContents().get(0);
		
		//InstancePropertie:
		//
		//	nameInst=Name & count=Count? & instance=Instances?;
		public ParserRule getRule() { return rule; }

		//nameInst=Name & count=Count? & instance=Instances?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//nameInst=Name
		public Assignment getNameInstAssignment_0() { return cNameInstAssignment_0; }

		//Name
		public RuleCall getNameInstNameParserRuleCall_0_0() { return cNameInstNameParserRuleCall_0_0; }

		//count=Count?
		public Assignment getCountAssignment_1() { return cCountAssignment_1; }

		//Count
		public RuleCall getCountCountParserRuleCall_1_0() { return cCountCountParserRuleCall_1_0; }

		//instance=Instances?
		public Assignment getInstanceAssignment_2() { return cInstanceAssignment_2; }

		//Instances
		public RuleCall getInstanceInstancesParserRuleCall_2_0() { return cInstanceInstancesParserRuleCall_2_0; }
	}

	public class InstancesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instances");
		private final RuleCall cInstanceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Instances:
		//
		//	Instance;
		public ParserRule getRule() { return rule; }

		//Instance
		public RuleCall getInstanceParserRuleCall() { return cInstanceParserRuleCall; }
	}

	public class CountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Count");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCountKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Count:
		//
		//	"count:" val=INT POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//"count:" val=INT POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//"count:"
		public Keyword getCountKeyword_0() { return cCountKeyword_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_2() { return cPOINT_VIRGULETerminalRuleCall_2; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNIDTerminalRuleCall_1_0 = (RuleCall)cNameNAssignment_1.eContents().get(0);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Name: //	'name:'  (nameN+=ID)+  POINT_VIRGULE
		//
		//	"name:" nameN=ID POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		////	'name:'  (nameN+=ID)+  POINT_VIRGULE
		//
		//"name:" nameN=ID POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		////	'name:'  (nameN+=ID)+  POINT_VIRGULE
		//
		//"name:"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//nameN=ID
		public Assignment getNameNAssignment_1() { return cNameNAssignment_1; }

		//ID
		public RuleCall getNameNIDTerminalRuleCall_1_0() { return cNameNIDTerminalRuleCall_1_0; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_2() { return cPOINT_VIRGULETerminalRuleCall_2; }
	}

	public class ECARuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECARule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEca_rule_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEca_rule_nameComponentCrossReference_1_0 = (CrossReference)cEca_rule_nameAssignment_1.eContents().get(0);
		private final RuleCall cEca_rule_nameComponentIDTerminalRuleCall_1_0_1 = (RuleCall)cEca_rule_nameComponentCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEcapropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEcapropertiesECAPropertyParserRuleCall_3_0 = (RuleCall)cEcapropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ECARule:
		//
		//	"Rule" eca_rule_name=[Component] "{" ecaproperties+=ECAProperty* "}";
		public ParserRule getRule() { return rule; }

		//"Rule" eca_rule_name=[Component] "{" ecaproperties+=ECAProperty* "}"
		public Group getGroup() { return cGroup; }

		//"Rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//eca_rule_name=[Component]
		public Assignment getEca_rule_nameAssignment_1() { return cEca_rule_nameAssignment_1; }

		//[Component]
		public CrossReference getEca_rule_nameComponentCrossReference_1_0() { return cEca_rule_nameComponentCrossReference_1_0; }

		//ID
		public RuleCall getEca_rule_nameComponentIDTerminalRuleCall_1_0_1() { return cEca_rule_nameComponentIDTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//ecaproperties+=ECAProperty*
		public Assignment getEcapropertiesAssignment_3() { return cEcapropertiesAssignment_3; }

		//ECAProperty
		public RuleCall getEcapropertiesECAPropertyParserRuleCall_3_0() { return cEcapropertiesECAPropertyParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ECAPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECAProperty");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cElasticAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cElasticElasticParserRuleCall_0_0 = (RuleCall)cElasticAssignment_0.eContents().get(0);
		private final Assignment cNumInstancesAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cNumInstancesNumInstancesParserRuleCall_1_0 = (RuleCall)cNumInstancesAssignment_1.eContents().get(0);
		private final Assignment cMinallowedinstancesAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cMinallowedinstancesMinAllowedInstancesParserRuleCall_2_0 = (RuleCall)cMinallowedinstancesAssignment_2.eContents().get(0);
		private final Assignment cMaxallowedinstancesAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cMaxallowedinstancesMaxAllowedInstancesParserRuleCall_3_0 = (RuleCall)cMaxallowedinstancesAssignment_3.eContents().get(0);
		
		//ECAProperty:
		//
		//	elastic=Elastic & numInstances=NumInstances? & minallowedinstances=MinAllowedInstances? &
		//
		//	maxallowedinstances=MaxAllowedInstances?;
		public ParserRule getRule() { return rule; }

		//elastic=Elastic & numInstances=NumInstances? & minallowedinstances=MinAllowedInstances? &
		//
		//maxallowedinstances=MaxAllowedInstances?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//elastic=Elastic
		public Assignment getElasticAssignment_0() { return cElasticAssignment_0; }

		//Elastic
		public RuleCall getElasticElasticParserRuleCall_0_0() { return cElasticElasticParserRuleCall_0_0; }

		//numInstances=NumInstances?
		public Assignment getNumInstancesAssignment_1() { return cNumInstancesAssignment_1; }

		//NumInstances
		public RuleCall getNumInstancesNumInstancesParserRuleCall_1_0() { return cNumInstancesNumInstancesParserRuleCall_1_0; }

		//minallowedinstances=MinAllowedInstances?
		public Assignment getMinallowedinstancesAssignment_2() { return cMinallowedinstancesAssignment_2; }

		//MinAllowedInstances
		public RuleCall getMinallowedinstancesMinAllowedInstancesParserRuleCall_2_0() { return cMinallowedinstancesMinAllowedInstancesParserRuleCall_2_0; }

		//maxallowedinstances=MaxAllowedInstances?
		public Assignment getMaxallowedinstancesAssignment_3() { return cMaxallowedinstancesAssignment_3; }

		//MaxAllowedInstances
		public RuleCall getMaxallowedinstancesMaxAllowedInstancesParserRuleCall_3_0() { return cMaxallowedinstancesMaxAllowedInstancesParserRuleCall_3_0; }
	}

	public class ElasticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Elastic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElasticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Elastic:
		//
		//	"elastic:" ID POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//"elastic:" ID POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//"elastic:"
		public Keyword getElasticKeyword_0() { return cElasticKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_2() { return cPOINT_VIRGULETerminalRuleCall_2; }
	}

	public class NumInstancesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumInstances");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumInstancesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NumInstances:
		//
		//	"numInstances:" INT POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//"numInstances:" INT POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//"numInstances:"
		public Keyword getNumInstancesKeyword_0() { return cNumInstancesKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_2() { return cPOINT_VIRGULETerminalRuleCall_2; }
	}

	public class MinAllowedInstancesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinAllowedInstances");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMinAllowedInstancesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MinAllowedInstances:
		//
		//	"minAllowedInstances:" INT POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//"minAllowedInstances:" INT POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//"minAllowedInstances:"
		public Keyword getMinAllowedInstancesKeyword_0() { return cMinAllowedInstancesKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_2() { return cPOINT_VIRGULETerminalRuleCall_2; }
	}

	public class MaxAllowedInstancesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxAllowedInstances");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMaxAllowedInstancesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cPOINT_VIRGULETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//MaxAllowedInstances:
		//
		//	"maxAllowedInstances:" INT POINT_VIRGULE;
		public ParserRule getRule() { return rule; }

		//"maxAllowedInstances:" INT POINT_VIRGULE
		public Group getGroup() { return cGroup; }

		//"maxAllowedInstances:"
		public Keyword getMaxAllowedInstancesKeyword_0() { return cMaxAllowedInstancesKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//POINT_VIRGULE
		public RuleCall getPOINT_VIRGULETerminalRuleCall_2() { return cPOINT_VIRGULETerminalRuleCall_2; }
	}
	
	
	private ModelElements pModel;
	private FeatureElements pFeature;
	private ComponentElements pComponent;
	private PropertieElements pPropertie;
	private ExtendsElements pExtends;
	private ImportsElements pImports;
	private ExportsElements pExports;
	private ChildrenElements pChildren;
	private ChildElements pChild;
	private ExpressionElements pExpression;
	private InstallerElements pInstaller;
	private FacetElements pFacet;
	private InstanceElements pInstance;
	private InstancePropertieElements pInstancePropertie;
	private InstancesElements pInstances;
	private CountElements pCount;
	private NameElements pName;
	private ECARuleElements pECARule;
	private ECAPropertyElements pECAProperty;
	private ElasticElements pElastic;
	private NumInstancesElements pNumInstances;
	private MinAllowedInstancesElements pMinAllowedInstances;
	private MaxAllowedInstancesElements pMaxAllowedInstances;
	private TerminalRule tID;
	private TerminalRule tVIRGULE;
	private TerminalRule tPOINT_VIRGULE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RoboConfdslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.roboConf.RoboConfdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model: //greetings+=Greeting*;
	//
	//	Features+=Feature*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	////Greeting:
	//
	////	'Hello' name=ID '!';
	//
	////	
	//
	////HolloWorld:
	//
	////	'hello people'
	//
	////;
	//
	//Feature:
	//
	//	Component | Facet | Instance;
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	////Component description
	//
	//Component:
	//
	//	name=ID "{" Properties+=Propertie* "}";
	public ComponentElements getComponentAccess() {
		return (pComponent != null) ? pComponent : (pComponent = new ComponentElements());
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//Propertie:
	//
	//	Installer | Children | Exports | Imports | Facet | Extends;
	public PropertieElements getPropertieAccess() {
		return (pPropertie != null) ? pPropertie : (pPropertie = new PropertieElements());
	}
	
	public ParserRule getPropertieRule() {
		return getPropertieAccess().getRule();
	}

	//// TODO Extend
	//
	//Extends:
	//
	//	"extends"? ext=ID ":" propertie=[Propertie];
	public ExtendsElements getExtendsAccess() {
		return (pExtends != null) ? pExtends : (pExtends = new ExtendsElements());
	}
	
	public ParserRule getExtendsRule() {
		return getExtendsAccess().getRule();
	}

	//Imports:
	//
	//	"imports:"? ID "." ID (VIRGULE ID "." ID)* POINT_VIRGULE;
	public ImportsElements getImportsAccess() {
		return (pImports != null) ? pImports : (pImports = new ImportsElements());
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}

	//Exports:
	//
	//	"exports:"? ID (VIRGULE ID "=" INT)* POINT_VIRGULE;
	public ExportsElements getExportsAccess() {
		return (pExports != null) ? pExports : (pExports = new ExportsElements());
	}
	
	public ParserRule getExportsRule() {
		return getExportsAccess().getRule();
	}

	//Children:
	//
	//	"children:"? children=child POINT_VIRGULE;
	public ChildrenElements getChildrenAccess() {
		return (pChildren != null) ? pChildren : (pChildren = new ChildrenElements());
	}
	
	public ParserRule getChildrenRule() {
		return getChildrenAccess().getRule();
	}

	//child:
	//
	//	expression (VIRGULE expression)* POINT_VIRGULE;
	public ChildElements getChildAccess() {
		return (pChild != null) ? pChild : (pChild = new ChildElements());
	}
	
	public ParserRule getChildRule() {
		return getChildAccess().getRule();
	}

	//expression:
	//
	//	ID;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Installer:
	//
	//	"installer:" name=ID POINT_VIRGULE;
	public InstallerElements getInstallerAccess() {
		return (pInstaller != null) ? pInstaller : (pInstaller = new InstallerElements());
	}
	
	public ParserRule getInstallerRule() {
		return getInstallerAccess().getRule();
	}

	////Facet description
	//
	//Facet:
	//
	//	"facet" namefacet=ID "{" children=Children? & exports=Exports? & extends=Extends? "}";
	public FacetElements getFacetAccess() {
		return (pFacet != null) ? pFacet : (pFacet = new FacetElements());
	}
	
	public ParserRule getFacetRule() {
		return getFacetAccess().getRule();
	}

	//// Instance Description
	//
	//Instance:
	//
	//	"instance of" nstanceName=[Component] "{" InstanceProperties+=InstancePropertie* "}";
	public InstanceElements getInstanceAccess() {
		return (pInstance != null) ? pInstance : (pInstance = new InstanceElements());
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}

	//InstancePropertie:
	//
	//	nameInst=Name & count=Count? & instance=Instances?;
	public InstancePropertieElements getInstancePropertieAccess() {
		return (pInstancePropertie != null) ? pInstancePropertie : (pInstancePropertie = new InstancePropertieElements());
	}
	
	public ParserRule getInstancePropertieRule() {
		return getInstancePropertieAccess().getRule();
	}

	//Instances:
	//
	//	Instance;
	public InstancesElements getInstancesAccess() {
		return (pInstances != null) ? pInstances : (pInstances = new InstancesElements());
	}
	
	public ParserRule getInstancesRule() {
		return getInstancesAccess().getRule();
	}

	//Count:
	//
	//	"count:" val=INT POINT_VIRGULE;
	public CountElements getCountAccess() {
		return (pCount != null) ? pCount : (pCount = new CountElements());
	}
	
	public ParserRule getCountRule() {
		return getCountAccess().getRule();
	}

	//Name: //	'name:'  (nameN+=ID)+  POINT_VIRGULE
	//
	//	"name:" nameN=ID POINT_VIRGULE;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//ECARule:
	//
	//	"Rule" eca_rule_name=[Component] "{" ecaproperties+=ECAProperty* "}";
	public ECARuleElements getECARuleAccess() {
		return (pECARule != null) ? pECARule : (pECARule = new ECARuleElements());
	}
	
	public ParserRule getECARuleRule() {
		return getECARuleAccess().getRule();
	}

	//ECAProperty:
	//
	//	elastic=Elastic & numInstances=NumInstances? & minallowedinstances=MinAllowedInstances? &
	//
	//	maxallowedinstances=MaxAllowedInstances?;
	public ECAPropertyElements getECAPropertyAccess() {
		return (pECAProperty != null) ? pECAProperty : (pECAProperty = new ECAPropertyElements());
	}
	
	public ParserRule getECAPropertyRule() {
		return getECAPropertyAccess().getRule();
	}

	//Elastic:
	//
	//	"elastic:" ID POINT_VIRGULE;
	public ElasticElements getElasticAccess() {
		return (pElastic != null) ? pElastic : (pElastic = new ElasticElements());
	}
	
	public ParserRule getElasticRule() {
		return getElasticAccess().getRule();
	}

	//NumInstances:
	//
	//	"numInstances:" INT POINT_VIRGULE;
	public NumInstancesElements getNumInstancesAccess() {
		return (pNumInstances != null) ? pNumInstances : (pNumInstances = new NumInstancesElements());
	}
	
	public ParserRule getNumInstancesRule() {
		return getNumInstancesAccess().getRule();
	}

	//MinAllowedInstances:
	//
	//	"minAllowedInstances:" INT POINT_VIRGULE;
	public MinAllowedInstancesElements getMinAllowedInstancesAccess() {
		return (pMinAllowedInstances != null) ? pMinAllowedInstances : (pMinAllowedInstances = new MinAllowedInstancesElements());
	}
	
	public ParserRule getMinAllowedInstancesRule() {
		return getMinAllowedInstancesAccess().getRule();
	}

	//MaxAllowedInstances:
	//
	//	"maxAllowedInstances:" INT POINT_VIRGULE;
	public MaxAllowedInstancesElements getMaxAllowedInstancesAccess() {
		return (pMaxAllowedInstances != null) ? pMaxAllowedInstances : (pMaxAllowedInstances = new MaxAllowedInstancesElements());
	}
	
	public ParserRule getMaxAllowedInstancesRule() {
		return getMaxAllowedInstancesAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal VIRGULE:
	//
	//	",";
	public TerminalRule getVIRGULERule() {
		return (tVIRGULE != null) ? tVIRGULE : (tVIRGULE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VIRGULE"));
	} 

	//terminal POINT_VIRGULE:
	//
	//	";";
	public TerminalRule getPOINT_VIRGULERule() {
		return (tPOINT_VIRGULE != null) ? tPOINT_VIRGULE : (tPOINT_VIRGULE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POINT_VIRGULE"));
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
